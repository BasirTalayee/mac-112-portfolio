{
  "hash": "8616dc5d8d7192cb5706d4ee259bca34",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data viz\"\nnumber-sections: true\n---\n\n\n::: {.callout-caution title=\"Learning Goals\"}\n**Warm-up (together)**\n\n-   Convince ourselves about the importance of data viz.\n-   Explore the \"grammar of graphics\".\n\n**Exercises (in groups)**\n\n-   Familiarize yourself with the `ggplot()` structure and grammar.\n-   Build *univariate* viz, i.e. viz for 1 variable at a time.\n-   Start recognizing the different approaches for visualizing categorical vs quantitative variables.\n:::\n\n\n::: {.callout-note title=\"Additional Resources\"}\n\nFor more information about the topics covered in this chapter, refer to the resources below:\n\n-   [Intro to ggplot (YouTube)](https://www.youtube.com/watch?v=0OtY38LVy-o&list=PLyEH7o09I467e8zck95awweg_bGuLzqjz&index=6) by Lisa Lendway\n-   [Univariate viz interpreting (YouTube)](https://www.youtube.com/watch?v=7zQmWTT_m-Y) by Alicia Johnson--you can ignore the parts about numerical summaries.\n-   [A grammar for data graphics (html)](https://mdsr-book.github.io/mdsr2e/ch-vizII.html) by Baumer, Kaplan, & Horton\n-   [Data visualization (html)](https://r4ds.hadley.nz/data-visualize.html) by Wickham, Ã‡etinkaya-Rundel, & Grolemund\n-   [Visualizing distributions (html)](https://clauswilke.com/dataviz/histograms-density-plots.html) by Wilke\n-   [ggplot cheatsheet (pdf)](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n\n:::\n\n\n::: {.callout-important title=\"Instructions\"}\n\n**General**\n\n-   Be kind to yourself.\n-   Collaborate with and be kind to others. You are expected to work together as a group.\n-   Ask questions. Remember that we won't discuss these exercises as a class.\n\n**Activity Specific**\n\n\nHelp each other with the following:\n\n\n-   Create a new Quarto document in the activities folder of your portfolio project and do not forgot to include it in `_quarto.yml` file.  Then click the `</> Code` link at the top right corner of this page and copy the code into the created Quarto document.  This is where you'll take notes.  Remember that the portfolio is yours, so take notes in whatever way is best for you.\n-   **Don't start the Exercises section before we get there as a class.** First, engage in class discussion and eventually collaborate with your group on the exercises!\n-   The best way to learn `ggplot` is to just play around. Focus on the *patterns* and *potential* of the code. Don't worry about memorizing anything! You will naturally start to remember the most important / common code the more and more you use it.\n\n:::\n\n## Background\n\nWe're starting our unit on **data visualization** or **data viz**, thus skipping some steps in the data science workflow.  Mainly, it's tough to understand how our data should be *prepared* before we have a sense of what we want to *do* with this data!\n\n![](https://mac-stat.github.io/images/112/legos.png){width=\"50%\"}\n\n[Source](https://www.effectivedatastorytelling.com/post/a-deeper-dive-into-lego-bricks-and-data-stories)\n\n\n## Warm-up\n\n### The Importance of Visualizations\n\n#### EXAMPLE 1 {-}\n\nThe data below includes information on hiking trails in the 46 \"high peaks\" in the Adirondack mountains of Northeastern New York state. This includes data on the hike's highest `elevation` (feet), vertical `ascent` (feet), `length` (miles), `time` in hours that it takes to complete, and difficulty `rating`. Open this data in a viewer, through the Environment tab or by typing `View(hikes)` in the *console*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import data\nhikes <- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n```\n:::\n\n\n::: {.callout-warning title=\"Discussion\"}\n\n1. What is the pattern / trend of `elevation` of hiking trails?\n2. What is the relationship between a hike's `elevation` and typical `time` it takes to summit / reach the top?\n\n:::\n\n\n#### EXAMPLE 2 {-}\n\nLook at the plot below taken from a story reported by [this New York Times article (html)](https://www.nytimes.com/2024/01/09/climate/2023-warmest-year-record.html).\n\n::: {.callout-warning title=\"Discussion\"}\n\nSuppose that the article tried telling the story *without* using data viz, What would that story be like?\n\n:::\n\n![](https://mac-stat.github.io/images/112/nyt_temperature_viz.png)\n\n\n#### Benefits of Visualization {-}\n\n-   Understand what we're working with from\n    -   scales & typical outcomes, to\n    -   outliers, i.e. unusual cases, to\n    -   patterns & relationships\n-   Refine research questions & inform next steps of our analysis.\n-   Communicate our findings and tell a story.\n\n\n### Components of data graphics\n\n#### EXAMPLE 3 {-}\n\nData viz is the process of *mapping* data to different plot components. For example, in the NYT example above, the research team *mapped* data like the following (but with many more rows!) to the plot:\n\n| observation | decade  | year | date | relative temp |\n|:------------|:-------:|:----:|:----:|:-------------:|\n| 1           | 2020-30 | 2023 | 1/23 |      1.2      |\n| 2           | 1940-60 | 1945 | 3/45 |     -0.05     |\n\n::: {.callout-warning title=\"Discussion\"}\n\nWrite down step-by-step directions for using a data table like the one above to create the temperature visualization. A computer is your audience, thus be as precise as possible, but trust that the computer can find the exact numbers if you tell it where.\n\n:::\n\n\n#### COMPONENTS OF GRAPHICS {-}\n\nIn data viz, we essentially start with a blank canvas and then map data onto it. There are multiple possible *mapping components*. Some basics from [Wickham](https://ggplot2-book.org/introduction) (which goes into more depth):\n\n-   **a frame, or coordinate system**\\\n    The variables or features that define the axes and gridlines of the canvas.\n\n-   **a layer**\\\n    The geometric elements (e.g. lines, points) we add to the canvas to represent either the data points themselves or patterns among the data points. Each type of geometric element is a separate layer. These geometric elements are sometimes called \"geoms\" or \"glyphs\" (like *heiroglyph*!)\n\n-   **scales**\\\n    The aesthetics we might add to geometric elements (e.g. color, size, shape) to incorporate additional information about data scales or groups.\n\n-   **faceting**\\\n    The splitting up of the data into multiple subplots, or facets, to examine different groups within the data.\n\n-   **a theme**\\\n    Additional controls on the \"finer points\" of the plot aesthetics, (e.g. font type, background, color scheme).\n\n\n\n#### EXAMPLE {-}\n\nIn the NYT graphic, the data was mapped to the plot as follows:\n\n-   **frame**: x-axis = date, y-axis = temp\n-   **layers:** add one line per year, add dots for each month in 2023\n-   **scales:** color each line by decade\n-   **faceting:** none\n-   **a theme:** NYT style\n\n\n### ggplot + R packages\n\nWe will use the powerful `ggplot` tools in R to build (most of) our viz. The `gg` here is short for the **\"grammar of graphics\"**. These tools are developed in a way that:\n\n-   recognizes that code is communication (it has a grammar!)\n-   connects code to the components / philosophy of data viz\n\n\n\n#### EXAMPLES: ggplot in the News {-}\n\n-   [MPR journalist David Montgomery](http://dhmontgomery.com/portfolio/): [R data viz](https://github.com/dhmontgomery/personal-work/tree/master/theme-mpr)\n-   [BBC R data viz](https://bbc.github.io/rcookbook/)\n\n\nTo use these tools, we must first get them into R/RStudio! Recall that R is *open source*. Anybody can build R tools and share them through special R **packages**. The **tidyverse package** compiles a set of individual packages, including `ggplot2`, that share a common grammar and structure. Though the learning curve can be steep, this grammar is intuitive and generalizable once mastered. Image source: [Posit BBC on X](https://twitter.com/posit_pbc/status/1145592633823244289)\n\n![](https://mac-stat.github.io/images/112/tidyverse.png){width=\"50%\"}\n\nFollow the directions below to *install* this package, the directions depending upon whether or not you're working on Mac's server. Unless the authors of a package add updates, you only need to do this once all semester. To install:\n\n-   **If you're working on Mac's RStudio server**\\\n    `tidyverse` is already installed on the server! Check this 2 ways.\n    -   Type `library(tidyverse)` in your console. If you don't get an error, it's installed!\n    -   Check that it appears in the list under the \"Packages\" tab (bottom right pane).\n-   **If you're working with a desktop version of R/RStudio**\\\n    In the \"Packages\" tab (bottom right pane), click \"Install\". From there type the name of the package (`tidyverse`), make sure the \"Install dependencies\" box is checked, and click \"Install\".\n\n\n## Exercises\n\n\n\n### Exercise 1: Research Questions {.unnumbered}\n\nLet's dig into the `hikes` data, starting with the `elevation` and difficulty `ratings` of the hikes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hikes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             peak elevation difficulty ascent length time    rating\n1     Mt. Marcy        5344          5   3166   14.8 10.0  moderate\n2 Algonquin Peak       5114          5   2936    9.6  9.0  moderate\n3   Mt. Haystack       4960          7   3570   17.8 12.0 difficult\n4   Mt. Skylight       4926          7   4265   17.9 15.0 difficult\n5 Whiteface Mtn.       4867          4   2535   10.4  8.5      easy\n6       Dix Mtn.       4857          5   2800   13.2 10.0  moderate\n```\n\n\n:::\n:::\n\n\na.  What features would we like a visualization of the *categorical* difficulty `rating` variable to capture?\nb.  What about a visualization of the *quantitative* `elevation` variable?\n\n\n\n### Exercise 2: Load tidyverse {.unnumbered}\n\nWe'll address the above questions using `ggplot` tools. Try running the following chunk and simply take note of the error message -- this is one you'll get a lot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use the ggplot function\nggplot(hikes, aes(x = rating))\n```\n:::\n\n\nIn order to use `ggplot` tools, we have to first *load* the `tidyverse` package in which they live. Mainly, we've *installed* the package but need to tell R when we want to *use* it. Run the chunk below to load the library. You'll need to do this within any .qmd file that uses `ggplot()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the package\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n### Exercise 3: Bar Chart of Ratings - Part 1 {.unnumbered}\n\nConsider some specific research questions about the difficulty `rating` of the hikes:\n\n1. How many hikes fall into each category?\n2. Are the hikes evenly distributed among these categories, or are some more common than others?\n\nAll of these questions can be answered with: (1) a **bar chart**; of (2) the *categorical* data recorded in the `rating` column. First, set up the plotting **frame**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = rating))\n```\n:::\n\n\nThink about:\n\n-   What did this do? What do you observe?\n-   What, in general, is the first argument of the `ggplot()` function?\n-   What is the purpose of writing `x = rating`?\n-   What do you think `aes` stands for?!?\n\n\n### Exercise 4: Bar Chart of Ratings - Part 2 {.unnumbered}\n\nNow let's add a **geometric layer** to the frame / canvas, and start customizing the plot's **theme**. To this end, try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.\n\nNOTE:\n\n-   Pay attention to the general code properties and structure, not memorization.\n-   Not all of these are \"good\" plots. We're just exploring `ggplot`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adding geom_bar() created a bar chart, where the count of occurrences for each unique rating value is displayed on the y-axis.Show frequncey of each rating\nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# addition of labs(x = \"Rating\", y = \"Number of hikes\"). This modifies the axis labels on the plot.\nggplot(hikes, aes(x = rating)) +\n  geom_bar() +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"green\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#  the color orange was added to the outer layer\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Theme was added -(theme_minimal()  minimalistic theme with no background annotations.\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n### Exercise 5: Bar Chart Follow-up {.unnumbered}\n\n#### Part a {.unnumbered}\n\nReflect on the `ggplot()` code.\n\n- Purpose of +: It's used to add layers or components (like geom_bar() or labs()) to the ggplot plot.\n- Why \"geom\": \"Geom\" stands for \"geometric object,\" specifying the type of plot (e.g., bars, lines, points).\n- labs(): Short for \"labels,\" used to modify axis labels, titles, and legends.\n- color vs. fill:\n-   color: Changes the outline or border color of shapes.\n-   fill: Changes the interior color of shapes (like filling bars).\n\n#### Part b {.unnumbered}\n\nIn general, bar charts allow us to examine the following properties of a *categorical* variable:\n\n-   **observed categories**: The hikes are categorized as \"difficult,\" \"easy,\" and \"moderate.\" These represent the different difficulty levels of the hikes.\n-   **variability between categories**: The hikes are not evenly distributed. The \"moderate\" hikes are the most common, with the highest frequency, while \"difficult\" hikes are the least common, and \"easy\" hikes fall in between.\n\n\nWe must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Summarize below what you learned from the bar chart, in context.\n\n- hikers in the Adirondacks are more likely to encounter moderate hikes than easy or difficult ones\n\n#### Part c {.unnumbered}\n\nIs there anything you don't like about this barplot? For example: check out the x-axis again.\n\n- The labels in the  x-axis again needs to be capitalized. \n\n\n### Exercise 6: Sad Bar Chart {.unnumbered}\n\nLet's now consider some research questions related to the *quantitative* `elevation` variable:\n\n1. Among the hikes, what's the *range* of elevation and how are the hikes *distributed* within this range (e.g. evenly, in clumps, \"normally\")?\n2. What's a *typical* elevation?\n3. Are there any *outliers*, i.e. hikes that have unusually high or low elevations?\n\nHere:\n\n-   Construct a **bar chart** of the *quantitative* `elevation` variable.\n-   Explain why this might *not* be an effective visualization for this and other quantitative variables. (What questions does / doesn't it help answer?)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = elevation))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n### Exercise 7: A Histogram of Elevation {.unnumbered}\n\nQuantitative variables require different viz than categorical variables. Especially when there are many possible outcomes of the quantitative variable. It's typically insufficient to simply count up the number of times we've observed a particular outcome as the bar graph did above. It gives us a sense of ranges and typical outcomes, but not a good sense of how the observations are distributed across this range. We'll explore two methods for graphing quantitative variables: **histograms** and **density plots**.\n\n\n**Histograms** are constructed by (1) dividing up the observed range of the variable into 'bins' of equal width; and (2) counting up the number of cases that fall into each bin. Check out the example below:\n\n![](https://mac-stat.github.io/images/112/histogram_demo.png){width=\"50%\"}\n\n#### Part a {.unnumbered}\n\nLet's dig into some details.\n\n-   How many hikes have an elevation between 4500 and 4700 feet?  It is 6\n-   How many total hikes have an elevation of at least 5100 feet?   1+1 = 2\n\n#### Part b {.unnumbered}\n\nNow the bigger picture. In general, histograms allow us to examine the following properties of a *quantitative* variable:\n\n-   **typical outcome:** Whereâ€™s the center of the data points? What's typical?   \n-   **variability & range:** How spread out are the outcomes? What are the max and min outcomes?\n-   **shape:** How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?\n-   **outliers:** Are there any outliers, i.e. outcomes that are unusually large/small?\n\nWe must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Addressing each of the features in the above list, summarize below what you learned from the histogram, in context.\n\n- Answer: 3700 to 5500 feet. Elevations vary from hike to hike relatively normally (with a bell shape) around a typical elevation of roughly 4500 feet.\n\n### Exercise 8: Building Histograms - Part 1 {.unnumbered}\n\n2-MINUTE CHALLENGE: Thinking of the bar chart code, try to *intuit* what line you can tack on to the below frame of `elevation` to add a histogram layer. Don't forget a `+`. If it doesn't come to you within 2 minutes, *no problem* -- all will be revealed in the next exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(binwidth = 50, fill = \"red\", color = \"green\")\n```\n:::\n\n\n\n### Exercise 9: Building Histograms - Part 2 {.unnumbered}\n\nLet's build some histograms. Try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a histogram layer\n\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(binwidth = 100) \n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding white color for the outter layer. \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"red\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding blue color for the filling of the graph\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"red\", fill = \"blue\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding lables for X and Y axes. \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Increasing the binwidth of the bar by 1000. \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 1000) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Changing the binwidth of the bars by 5, which is very small.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"red\", binwidth = 5) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Changing the binwidth of the bars by 200. \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 200) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n### Exercise 10: Histogram Follow-up {.unnumbered}\n\n-   What function added the histogram layer / geometry? geom_histogram()\n-   What's the difference between `color` and `fill`?  color outlined the bars and fill filled them\n-   Why does adding `color = \"white\"` improve the visualization?  easier to distinguish between the bars\n-   What did `binwidth` do?   changed the bin width\n-   Why does the histogram become ineffective if the `binwidth` is too big (e.g. 1000 feet)?  we lump too many hikes together and lose track of the nuances\n-   Why does the histogram become ineffective if the `binwidth` is too small (e.g. 5 feet)?  we donâ€™t lump enough hikes together and lose track of the bigger picture trends\n\n\n### Exercise 11: Density Plots {.unnumbered}\n\n**Density plots** are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the \"density\" of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve **always equals 1** and the area under any fraction of the curve represents the fraction of cases that lie in that range.\n\nCheck out a density plot of elevation. Notice that the y-axis (density) has no contextual interpretation -- it's a relative measure. The *higher* the density, the more *common* are elevations in that range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = elevation)) +\n  geom_density( fill = \"red\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n**Questions**\n\n-   INTUITION CHECK: Before tweaking the code and thinking back to `geom_bar()` and `geom_histogram()`, how do you *anticipate* the following code will change the plot?\n\n    -   `geom_density(color = \"blue\")`\n    -   `geom_density(fill = \"orange\")`\n\n-   TRY IT! Test out those lines in the chunk below. Was your intuition correct?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hikes, aes(x=elevation))+\n  geom_density(fill=\"orange\", color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n-   Examine the density plot. How does it compare to the histogram? What does it tell you about the *typical* elevation, *variability / range* in elevations, and *shape* of the distribution of *elevations* within this range?\n\n\n\n### Exercise 12: Density Plots vs Histograms {.unnumbered}\n\nThe histogram and density plot both allow us to visualize the behavior of a quantitative variable: typical outcome, variability / range, shape, and outliers. What are the pros/cons of each? What do you like/not like about each?\n\n**Histograms:**\n- Pros: Easy to understand; shows actual counts.\n- Cons: Bin size can distort the data.\n**Density Plots:**\n- Pros: Smooth, continuous view of distribution; good for comparisons.\n- Cons: Less intuitive; can hide actual data points.\n\n\n\n### Exercise 13: Code = communication {.unnumbered}\n\nWe *obviously* won't be done until we talk about communication. All code above has a similar *general* structure (where the details can change):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(___, aes(x = ___)) + \n  geom___(color = \"___\", fill = \"___\") + \n  labs(x = \"___\", y = \"___\")\n```\n:::\n\n\n-   Though not *necessary* to the code working, it's common, good practice to *indent* or *tab* the lines of code after the first line (counterexample below). Why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# YUCK\nggplot(hikes, aes(x = elevation)) +\ngeom_histogram(color = \"white\", binwidth = 200) +\nlabs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n:::\n\n\n-   Though not *necessary* to the code working, it's common, good practice to put a *line break* after each `+` (counterexample below). Why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# YUCK \nggplot(hikes, aes(x = elevation)) + geom_histogram(color = \"white\", binwidth = 200) + labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}