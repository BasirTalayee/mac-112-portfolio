---
title: "Data Visualization"
number-sections: true
---

#### COMPONENTS OF GRAPHICS {-}

In data viz, we essentially start with a blank canvas and then map data onto it. There are multiple possible *mapping components*. Some basics from [Wickham](https://ggplot2-book.org/introduction) (which goes into more depth):

-   **a frame, or coordinate system**\
    The variables or features that define the axes and gridlines of the canvas.

-   **a layer**\
    The geometric elements (e.g. lines, points) we add to the canvas to represent either the data points themselves or patterns among the data points. Each type of geometric element is a separate layer. These geometric elements are sometimes called "geoms" or "glyphs" (like *heiroglyph*!)

-   **scales**\
    The aesthetics we might add to geometric elements (e.g. color, size, shape) to incorporate additional information about data scales or groups.

-   **faceting**\
    The splitting up of the data into multiple subplots, or facets, to examine different groups within the data.

-   **a theme**\
    Additional controls on the "finer points" of the plot aesthetics, (e.g. font type, background, color scheme).
    
-   **frame**: x-axis = date, y-axis = temp
-   **layers:** add one line per year, add dots for each month in 2023
-   **scales:** color each line by decade
-   **faceting:** none
-   **a theme:** NYT style

#### Code Preportion and Structure - ggplot {-}

- Start with the dataset: Begin by specifying which dataset you want to visualize.
- Define aesthetics (aes): The next step is to map variables from the dataset to visual properties, like position on the x and y axes, color, size, shape, etc.
- Add geometries: Geometries are the visual objects used to represent the data, like points, lines, bars, etc.
- Customize the plot: You can further customize the scales, labels, themes, coordinates, facets, and guides.

#### Grammar of Graphics {-}

- ggplot() Function: This initializes the plot. It takes the dataset as its first argument and the aesthetic mappings (the variables to be plotted) within aes().

- Aesthetic Mappings (aes()): This is where you map your data to specific visual elements, such as x and y axes, colors, sizes, etc.

x: The variable for the x-axis.
y: The variable for the y-axis.
color: Map to different colors for different categories.
size: Control the size of points or lines.
Geometries (geom_*): These define how the data will be visually represented. You can think of geometries as the shapes that represent the data (e.g., bars, lines, points, etc.).

geom_bar(): For bar plots.
geom_point(): For scatter plots.
geom_line(): For line plots.
geom_histogram(): For histograms.
Scales: Scales control how data values are mapped to visual properties (such as colors, sizes, or axes).

scale_x_continuous(): Controls the x-axis for continuous variables.
scale_y_discrete(): Controls the y-axis for categorical data.
scale_color_manual(): Customizes color scales for categories.
Coordinates (coord_*): Coordinates define how data should be placed within the plot. Common coordinate systems are:

coord_cartesian(): The default Cartesian coordinate system (standard x and y axes).
coord_polar(): For polar coordinates (used for pie charts).
Facets (facet_*): Facets allow you to create multiple plots based on the values of categorical variables.

facet_wrap(): Create multiple small plots arranged into a grid.
facet_grid(): Create a grid of plots based on two variables.
Labels and Titles (labs()): Labels allow you to add titles, axis labels, captions, etc., to your plot.

labs(title = "My Plot", x = "X Axis", y = "Y Axis"): Adds a title and labels to the axes.
Themes: The theme system controls the non-data components of the plot (like the background, gridlines, font, etc.).

theme_bw(): A theme with a white background and gridlines.
theme_minimal(): A cleaner, more minimalistic theme.


#### Catagorical varaibale - Barchart


#### Quantitative varaibale - 

## Histogram 

Now the bigger picture. In general, histograms allow us to examine the following properties of a *quantitative* variable:

-   **typical outcome:** Whereâ€™s the center of the data points? What's typical?   
-   **variability & range:** How spread out are the outcomes? What are the max and min outcomes?
-   **shape:** How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?
-   **outliers:** Are there any outliers, i.e. outcomes that are unusually large/small?

## Density Plots

**Density plots** are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the "density" of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve **always equals 1** and the area under any fraction of the curve represents the fraction of cases that lie in that range.

**Histograms:**
- Pros: Easy to understand; shows actual counts.
- Cons: Bin size can distort the data.
**Density Plots:**
- Pros: Smooth, continuous view of distribution; good for comparisons.
- Cons: Less intuitive; can hide actual data points.

